<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Youngs羊示</title><link>https://ivanlee99.github.io/</link><description>对酒当歌，人生几何？譬如朝露，去日苦多。哀吾生之须臾，羡长江之无穷。吾尝终日而思矣，不如须臾之所学也。</description><copyright>Youngs羊示</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/18308725?v=4</url><title>avatar</title><link>https://ivanlee99.github.io/</link></image><lastBuildDate>Thu, 23 Oct 2025 01:56:48 +0000</lastBuildDate><managingEditor>Youngs羊示</managingEditor><ttl>60</ttl><webMaster>Youngs羊示</webMaster><item><title>2025年10月22日读完《倚天屠龙记(套装共4册)纯文字版》累计时长96小时12分钟</title><link>https://ivanlee99.github.io//post/18.html</link><description># 重温《倚天屠龙记》

**2025年10月22日**读完《倚天屠龙记(套装共4册)纯文字版》

累计时长**96小时12分钟**,**2019年4月14**日开始阅读,阅读天数**77天**





&lt;img width='1170' height='2532' alt='Image' src='https://github.com/user-attachments/assets/b88532bc-7a8b-4cd5-a1da-d4a7639061d8' /&gt;

&lt;img width='1125' height='2425' alt='Image' src='https://github.com/user-attachments/assets/85185270-0320-43c4-b17a-304d28a29ca9' /&gt;

# 读后感

```
张无忌——「成长的一重意义，就是在用真心试探虚假的边界，直到遍体鳞伤。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/18.html</guid><pubDate>Thu, 23 Oct 2025 01:56:11 +0000</pubDate></item><item><title>项目引入Nacos配置中心</title><link>https://ivanlee99.github.io//post/17.html</link><description>https://nacos.io/docs/latest/quickstart/quick-start/?spm=5238cd80.c984973.0.0.6be14023Z3kwkz

https://github.com/nacos-group/nacos-sdk-nodejs?spm=5238cd80.c984973.0.0.6be14023Z3kwkz

&lt;img width='1280' height='280' alt='Image' src='https://github.com/user-attachments/assets/aac34ac4-a29e-4680-b17f-708d70b3cefb' /&gt;

1、前置工作
- 设置必要的环境变量
NACOS_SERVER_URL：nacos服务地址
NACOS_CONFIG_DIR：写入nacos配置的文件目录

export NACOS_SERVER_URL=http://your_nacos_server:8848
export NACOS_CONFIG_DIR=./config
node nacosClient.js --dataid=test --namespaceid=your_namespace_id


2、客户端

```
#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const http = require('http');
const https = require('https');
const crypto = require('crypto');
const { URL } = require('url');
const minimist = require('minimist');

// 解析命令行参数
const args = minimist(process.argv.slice(2), {
  alias: {
    d: 'dataid',
    n: 'namespaceid',
    g: 'group'
  },
  string: ['d', 'n', 'g'],
  default: {
    group: 'DEFAULT_GROUP'
  }
});

// 环境变量检查
const nacosServerUrl = process.env.NACOS_SERVER_URL;
const nacosConfigDir = process.env.NACOS_CONFIG_DIR;

if (!nacosServerUrl) {
  console.error('配置服务地址无效,无法读取环境变量: NACOS_SERVER_URL');
  process.exit(1);
}

if (!nacosConfigDir) {
  console.error('配置目录无效,无法读取环境变量: NACOS_CONFIG_DIR');
  process.exit(1);
}

const { dataid, namespaceid, group } = args;
if (!dataid || !namespaceid) {
  console.error('dataid和namespaceid不能为空');
  process.exit(1);
}

// 创建配置目录
if (!fs.existsSync(nacosConfigDir)) {
  fs.mkdirSync(nacosConfigDir, { recursive: true });
}

console.log(`启动监听进程 [PID: ${process.pid}]`);

class NacosClient {
  constructor(configServer, dataId, namespaceId, group = 'DEFAULT_GROUP') {
    this.configServer = configServer.replace(/\/$/, '');
    this.dataId = dataId;
    this.namespaceId = namespaceId;
    this.group = group;
    this.saveDir = nacosConfigDir;
    this.longPullingTimeout = 90000; // 90秒长轮询超时
    this.lastContentMd5 = '';
    this.isActive = true;
    this.retryDelay = 5000; // 5秒重试延迟
  }

  async start() {
    console.log('开始监听配置变更...');
    while (this.isActive) {
      try {
        await this.fetchConfig();
      } catch (error) {
        console.error(`请求失败: ${error.message}`);
        await new Promise(resolve =&gt; setTimeout(resolve, this.retryDelay));
      }
    }
  }

  async fetchConfig() {
    const url = new URL(`${this.configServer}/nacos/v1/cs/configs`);
    url.searchParams.append('dataId', this.dataId);
    url.searchParams.append('tenant', this.namespaceId);
    url.searchParams.append('group', this.group);

    const options = {
      timeout: this.longPullingTimeout + 10000
    };

    return new Promise((resolve, reject) =&gt; {
      const protocol = url.protocol === 'https:' ? https : http;
      const req = protocol.get(url.toString(), options, (res) =&gt; {
        let data = '';
        
        res.on('data', (chunk) =&gt; data += chunk);
        
        res.on('end', () =&gt; {
          if (res.statusCode === 200) {
            this.handleConfigUpdate(data);
            resolve();
          } else if (res.statusCode === 304) {
            console.log('配置无变更，继续监听...');
            resolve();
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${data || 'Unknown error'}`));
          }
        });
      });

      req.on('error', reject);
      req.on('timeout', () =&gt; {
        req.destroy();
        console.log('长轮询超时，重新请求...');
        resolve();
      });
    });
  }

  handleConfigUpdate(content) {
    const currentMd5 = crypto.createHash('md5').update(content).digest('hex');
    
    if (currentMd5 !== this.lastContentMd5) {
      const filePath = path.join(this.saveDir, `${this.dataId}.ini`);
      
      try {
        fs.writeFileSync(filePath, content, { flag: 'w', encoding: 'utf8' });
        this.lastContentMd5 = currentMd5;
        console.log(`配置已更新: ${filePath} (${new Date().toISOString()})`);
      } catch (error) {
        console.error(`文件写入失败: ${error.message}`);
      }
    }
  }

  shutdown() {
    this.isActive = false;
    console.log('监听器已停止');
  }
}

// 创建并启动客户端
const client = new NacosClient(nacosServerUrl, dataid, namespaceid, group);
client.start();

// 处理进程退出信号
process.on('SIGINT', () =&gt; client.shutdown());
process.on('SIGTERM', () =&gt; client.shutdown());
```


## 使用说明
1、安装依赖:
`npm install minimist`
2、设置环境变量:
`export NACOS_SERVER_URL=http://your-nacos-server:8848
export NACOS_CONFIG_DIR=./config`
3\运行命令:
`node nacos-client.js \
  --dataid=your_data_id \
  --namespaceid=your_namespace \
  --group=YOUR_GROUP`

提示：生产环境建议结合Supervisor等工具实现进程守护，确保中断后自动重启。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/17.html</guid><pubDate>Tue, 14 Oct 2025 03:30:39 +0000</pubDate></item><item><title>github action:Waiting for a runner to pick up this job...</title><link>https://ivanlee99.github.io//post/16.html</link><description>### 主要原因及解决方案

运行器标签不匹配

工作流中指定的 runs-on 标签必须与运行器配置的标签完全一致（区分大小写）。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/16.html</guid><pubDate>Tue, 30 Sep 2025 01:52:16 +0000</pubDate></item><item><title>《陈行甲人生笔记》值得一看</title><link>https://ivanlee99.github.io//post/15.html</link><description>&lt;img width='462' height='1000' alt='Image' src='https://github.com/user-attachments/assets/22bf4b05-539a-4f5b-a7b2-56ba87b94afa' /&gt;

&lt;img width='368' height='998' alt='Image' src='https://github.com/user-attachments/assets/e88e9d7a-ba4f-4a7c-9934-ce10bf781b0d' /&gt;


### **我与我周旋久，宁做我。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/15.html</guid><pubDate>Tue, 30 Sep 2025 01:05:45 +0000</pubDate></item><item><title>nuxt2踩坑 process.env.NODE_ENV 只有development/production</title><link>https://ivanlee99.github.io//post/14.html</link><description>nuxt.config.js

```
const dotenv = require('dotenv')
const envConfig = dotenv.config({ path: `.env.${process.env.NODE_ENV}` }).parsed
const isPro = !!(process.env.NODE_ENV !== 'development') //判断是否开发环境
const isBuildTest = process.env.NUXT_APP_ENV === 'production.dev'

    env: envConfig,

```

.env.production.dev

```
# just a flag
NUXT_APP_ENV = 'production.dev'
```

### 执行

NODE_ENV=production.dev pm2 start ecosystem.config.js

### 需求

需要判断是否是测试环境

### 尝试解决
const isBuildTest = process.env.NODE_ENV === 'production.dev'//process.env.NODE_ENV-&gt;production-&gt;false

### 解决办法
const isBuildTest = process.env.NUXT_APP_ENV === 'production.dev'//process.env.NUXT_APP_ENV-&gt;production.dev-&gt;true


### 坑坑坑
process.env.NODE_ENV 只有development/production
process.env.NODE_ENV 只有development/production
process.env.NODE_ENV 只有development/production
。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/14.html</guid><pubDate>Mon, 29 Sep 2025 09:57:01 +0000</pubDate></item><item><title>在网页开发中实现“spoiler-blurred”（剧透内容模糊化）效果</title><link>https://ivanlee99.github.io//post/13.html</link><description>### 在网页开发中实现“spoiler-blurred”（剧透内容模糊化）效果

### 1、代码     filter: ### blur(0.5em);



```
.spoiler-blurred {
    cursor: default;
    -webkit-user-select: none;
    user-select: none;
    cursor: pointer;
    **filter: blur(0.5em);**
}
```
### 2、点击后移除poiler-blurred类名即可

![Image](https://github.com/user-attachments/assets/0e4ad262-6dd3-4cc3-a4e3-289a8b987450)

### 点击后移除poiler-blurred类名即可

![Image](https://github.com/user-attachments/assets/2fa395d5-4b66-48c5-a1c5-b1002716068f)。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/13.html</guid><pubDate>Mon, 21 Apr 2025 06:50:09 +0000</pubDate></item><item><title>vue2直接操作 keep-alive 内部缓存</title><link>https://ivanlee99.github.io//post/12.html</link><description>### 需求点击tab关闭按钮，将对应的tab的缓存关掉

![Image](https://github.com/user-attachments/assets/ed7a5e56-b685-440a-be2e-70ff5d1de495)


### 解决办法

![Image](https://github.com/user-attachments/assets/02176cc2-259e-4317-b243-e9c059fbf818)

```
  mounted() {
    let that = this
    setTimeout(() =&gt; {
      console.log('that.$refs.myKeepAliveRef', that.$refs.myKeepAliveRef)
      let keepAliveRef = that.$refs?.myKeepAliveRef?.$vnode?.parent?.componentInstance
      console.log('keepAliveRef', keepAliveRef)
      if (keepAliveRef) {
        that.$store.commit('tagsView/SET_KEEP_ALIVE_REF', keepAliveRef)
      }
    }, 1000)
  }
```

```
  clearCache({ state }, view) {
    const cache = state.keepAliveRef.cache;
    const keys = state.keepAliveRef.keys;
    let index = -1
    for (let i = 0; i &lt; keys.length; i++) {
      if (keys[i] &amp;&amp; keys[i].endsWith(view.fullPath)) {
        index = i
        break
      }
    }
    let name = ''
    if (index &gt; -1) {
      name = keys[index]
    }
    console.log('cache, keys', cache, keys)
    if (cache[name]) {
      // 销毁组件实例
      cache[name].componentInstance.$destroy();
      // 删除缓存
      delete cache[name];
      // 移除对应的 key
      if (index &gt; -1) {
        keys.splice(index, 1);
      }
    }
  }
```

![Image](https://github.com/user-attachments/assets/4991eb80-2576-47d4-b0e5-9ee3c9da58c8)


### 坑

```
&lt;keep-alive ref='keepAliveRef'&gt;
  &lt;/keep-alive&gt;
```
`this.$refs.keepAliveRef` 取不到值～


### 参考链接

https://blog.csdn.net/qq_19945487/article/details/133903323
vue2 keepalive多层缓存bug以及清除缓存
。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/12.html</guid><pubDate>Thu, 13 Mar 2025 08:55:39 +0000</pubDate></item><item><title>《月亮与六便士》读后感</title><link>https://ivanlee99.github.io//post/11.html</link><description>&#13;
![album_temp__ssa8b322f0813ab954cg011488ss_1736153171](https://github.com/user-attachments/assets/c35497c2-e34d-4c0d-9da4-ded069eaca43)&#13;
&#13;
&#13;
![album_temp__ssa8b322f0813ab954cg011488ss_1736153913](https://github.com/user-attachments/assets/7c6e6d0c-7455-4620-a230-ad5151779b31)&#13;
&#13;
我尽量回忆一下我读过的内容～如有出入以书本为准～&#13;
&#13;
作者毛姆以身入局真是还原伟大艺术家（至少后世的人是这么认为的）斯垂兰德的一生～&#13;
&#13;
斯垂兰德和斯垂兰德太太一开始过着幸福的生活～&#13;
育有一儿一女～&#13;
斯垂兰德是一位股票经纪人～&#13;
斯垂兰德太太是一位乐于和上流社会交往的人～&#13;
经常邀请作家等人事到家下午茶～其中包括作者毛姆～&#13;
作者有幸和斯垂兰德见过一面～&#13;
。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/11.html</guid><pubDate>Mon, 06 Jan 2025 10:32:02 +0000</pubDate></item><item><title>使用open自动打开浏览器</title><link>https://ivanlee99.github.io//post/10.html</link><description># 使用open自动打开浏览器&#13;
## 需求背景&#13;
我用pkg打包成exe后，双击exe自动打开浏览器&#13;
## 技术实现&#13;
使用[open](https://github.com/sindresorhus/open)&#13;
&#13;
+ 安装`npm install open@8`&#13;
+ 使用&#13;
`&#13;
app.listen(3003, async () =&gt; {&#13;
    console.log('Server is running on http://localhost:3003');&#13;
    // const { default: open } = await import('open'); // 动态导入 open 模块&#13;
    await open('http://localhost:3003'); // 启动后自动打开浏览器&#13;
});&#13;
&#13;
`&#13;
![page1](https://github.com/user-attachments/assets/9b107d1b-7b9d-488b-86bd-d368bdb3dc1c)&#13;
&lt;img width='1195' alt='page' src='https://github.com/user-attachments/assets/7c59122f-1792-4cd3-b581-2779ba59cf0b'&gt;&#13;
&#13;
## 注意事项&#13;
&#13;
警告：此包是本机 ESM，不再提供 CommonJS 导出。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/10.html</guid><pubDate>Wed, 11 Dec 2024 08:36:08 +0000</pubDate></item><item><title>使用pkg将node打包成exe</title><link>https://ivanlee99.github.io//post/9.html</link><description># 需求描述&#13;
将node打包成exe&#13;
&#13;
# 技术方案&#13;
使用`pkg`。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/9.html</guid><pubDate>Wed, 11 Dec 2024 07:54:00 +0000</pubDate></item><item><title>记录同事遭遇机票退改签骗局环环扣</title><link>https://ivanlee99.github.io//post/8.html</link><description>### 同事遭遇机票退改签骗局环环扣&#13;
2024年11月29日周五&#13;
team一个同事正在打电话～&#13;
隐隐约约听到他在跟什么客服打电话～&#13;
听到了验证码～&#13;
听到了录屏～&#13;
。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/8.html</guid><pubDate>Tue, 03 Dec 2024 04:40:18 +0000</pubDate></item><item><title>每天一句土味情话～</title><link>https://ivanlee99.github.io//post/7.html</link><description>`Gmeek-html&lt;iframe src='https://api.uomg.com/api/rand.qinghua?format=json' width='100%' height='460px' frameborder='0' allowfullscreen='true'&gt;&lt;/iframe&gt;`。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/7.html</guid><pubDate>Fri, 29 Nov 2024 02:42:31 +0000</pubDate></item><item><title>项目研发流程与制度</title><link>https://ivanlee99.github.io//post/6.html</link><description>### 产研发中心项目研发流程与制度&#13;
&#13;
&#13;
![image](https://github.com/user-attachments/assets/53562333-141f-43e4-9e55-25bcc2fab868)&#13;
&#13;
### 欢迎留言讨论～&#13;
。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/6.html</guid><pubDate>Wed, 27 Nov 2024 09:28:59 +0000</pubDate></item><item><title>乐高系统的设计原理</title><link>https://ivanlee99.github.io//post/5.html</link><description>&lt;img width='1000' alt='image' src='https://github.com/user-attachments/assets/8fd5a7c8-d209-415c-a965-ca044191c4e9'&gt;&#13;
&lt;img width='997' alt='image' src='https://github.com/user-attachments/assets/b0883a85-8733-4e2c-9b1d-745ccb7d6b8a'&gt;&#13;
&lt;img width='999' alt='image' src='https://github.com/user-attachments/assets/7fc106c0-db56-4ab9-a08d-b618362097b9'&gt;&#13;
&lt;img width='994' alt='image' src='https://github.com/user-attachments/assets/b6efad22-a544-4af2-a021-f4ada5cccf0c'&gt;&#13;
&lt;img width='997' alt='image' src='https://github.com/user-attachments/assets/4565f36a-9283-4512-b6a7-c9745b4f488e'&gt;&#13;
&lt;img width='993' alt='image' src='https://github.com/user-attachments/assets/891f05cb-5641-4874-9c04-5604b0d7a728'&gt;&#13;
&lt;img width='992' alt='image' src='https://github.com/user-attachments/assets/d34ebb6a-efff-4320-ba1c-caf8ef80504a'&gt;&#13;
&lt;img width='991' alt='image' src='https://github.com/user-attachments/assets/f352b87b-0a8c-4aea-9999-d2aa5e645343'&gt;&#13;
&lt;img width='995' alt='image' src='https://github.com/user-attachments/assets/8a7d6487-a67b-4f5f-9cf2-cb26b7b52058'&gt;&#13;
&lt;img width='992' alt='image' src='https://github.com/user-attachments/assets/daa29c6b-fb86-41d1-a1fd-1480c3c63142'&gt;&#13;
&lt;img width='996' alt='image' src='https://github.com/user-attachments/assets/a299d83a-05e8-4b53-bc59-77c1a829e1b1'&gt;&#13;
。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/5.html</guid><pubDate>Tue, 26 Nov 2024 10:21:31 +0000</pubDate></item><item><title>Git 规范</title><link>https://ivanlee99.github.io//post/4.html</link><description>![app yinxiang com_fx_749117a3-b1b8-4f28-a386-9e5dc19e482a (2)](https://github.com/user-attachments/assets/975e7ff8-55f3-428a-adfa-4ff85b9759e4)&#13;
。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/4.html</guid><pubDate>Mon, 25 Nov 2024 09:11:04 +0000</pubDate></item><item><title>pm2不断重启排查和解决</title><link>https://ivanlee99.github.io//post/2.html</link><description># pm2不断重启排查&#13;
&#13;
【p0】pc端进程重启&#13;
&#13;
## 一、问题：pm2 list 显示进程不断重启&#13;
![qcLTdZsBo-KX6H6AGs3q03Xw6YysoQsBo86gLFit1xI](https://github.com/user-attachments/assets/c597e0aa-cb1d-47bd-927f-78139f4e0fa9)&#13;
![aMQgFYFN2LPXrumFoX47qJe6RK5O3XO6lYt8J2DrYsQ](https://github.com/user-attachments/assets/bdf11f94-93e1-4481-bc2d-ed4137a1a0ba)&#13;
![FHkbMpCXktNXOmqTS2Wj4I07igCwIiJStuy6OuVac2g](https://github.com/user-attachments/assets/4049b95d-943e-4c04-8839-0d4d57bb3232)&#13;
&#13;
&#13;
&#13;
## 二、解决办法&#13;
&#13;
本地打包查看内存情况&#13;
&#13;
1、新增.env.development.debug文件&#13;
&#13;
```plain&#13;
# just a flag&#13;
NUXT_APP_ENV = 'development.debug'&#13;
```&#13;
 &#13;
2、package.json 新增打包命令&#13;
&#13;
```plain&#13;
		'build:debug': 'node ./generate-version.js &amp;&amp; cross-env NODE_ENV=development.debug nuxt build',&#13;
		'debug': 'cross-env NODE_ENV=development.debug node --inspect  node_modules/.bin/nuxt start',&#13;
		'start:debug': 'rm -rf node_modules &amp;&amp; yarn install &amp;&amp; npm run build:debug &amp;&amp; npm run debug'&#13;
```&#13;
 &#13;
3、启动&#13;
&#13;
```plain&#13;
npm run start:debug&#13;
```&#13;
 &#13;
![GM9Y_Sol16fJv3zDbeMg4yUbGCky_2amLXIdd3pBqHg](https://github.com/user-attachments/assets/c5069739-e147-4c76-9972-6adf96a50297)&#13;
&#13;
&#13;
&#13;
4、检测内存&#13;
&#13;
chrome://inspect/#devices&#13;
&#13;
&lt;img width='778' alt='xAjQj-ESG3p3_LEwMEb8fpb3PAezwC--R9jXU_IF2oI' src='https://github.com/user-attachments/assets/2a3b665c-448b-48cc-b125-9ea9e4d5eaf6'&gt;&#13;
&#13;
&#13;
&lt;img width='1440' alt='OPN3BlYPUJL5Ck8jJi0idNRNLtilt-utioJPBOs66qM' src='https://github.com/user-attachments/assets/075f9c0d-f9e9-41f2-a87a-92229a1bcfff'&gt;&#13;
&#13;
&#13;
未访问localhost:3000前打1次内存快照&#13;
&#13;
访问localhost:3000后打第2次快照&#13;
&#13;
关闭localhost:3000标签后打第三次快照&#13;
&#13;
访问localhost:3000后打第4次快照&#13;
&#13;
关闭localhost:3000标签后打第5次快照&#13;
&#13;
访问localhost:3000后打第6次快照&#13;
&#13;
关闭localhost:3000标签后打第7次快照&#13;
&#13;
&#13;
&lt;img width='1440' alt='WaMxganUC8h_8uXh7CufDioYDDfsiZJIdghHw0VkQb0' src='https://github.com/user-attachments/assets/c85a7014-3bea-454a-9a8c-582d23eaa106'&gt;&#13;
&#13;
&#13;
&#13;
&#13;
内存不断增加，查看第5和弟6次之间分配的内存&#13;
&#13;
点击具体实例，点击对应的文件&#13;
&#13;
查看对应代码的情况&#13;
&#13;
&lt;img width='1440' alt='TrRLtJyTzfoeEfX5MAItHoNbPUn_eo3t9Iilx2P3niI' src='https://github.com/user-attachments/assets/3fdd98da-9f40-434a-bb01-e65a039ec327'&gt;&#13;
&#13;
&#13;
&lt;img width='1440' alt='Dn_qcZ-SlSMP1GTRYl8NXwopGDang393TDkhiRu8Rmo' src='https://github.com/user-attachments/assets/fa757604-b5d7-4db8-9ef7-3e94ef0f7ac6'&gt;&#13;
&#13;
&#13;
![4giPWSgINKpwiChJrJ7VAY8PEXnupSBB3PYXIkvmB8U](https://github.com/user-attachments/assets/5228b2f3-8bb1-4c8d-b517-a78187b27f67)&#13;
&#13;
&#13;
&#13;
![ogtZbpZjy4fjXie5WcgeMAN8H0CuZYbYDha9SFhCg_4](https://github.com/user-attachments/assets/639fd5bf-4ea2-4ff8-8350-1745a0f410d6)&#13;
&#13;
&#13;
发现是layouts/error.vue的computed中调用了setInterval 没清除&#13;
&#13;
## 三、修复&#13;
&#13;
computed 中注释`handleCountDown方法`&#13;
&#13;
改为mounted中调用&#13;
&#13;
![Gc-lsa0Jp4PQRCrHxElSThInc54ZWPVQMkWWNm46mcs](https://github.com/user-attachments/assets/67e4b41b-a54e-455d-8ab8-26c7947efe28)&#13;
&#13;
&#13;
&#13;
&#13;
## 四、修复成功后pm2 list 显示重启为0，内存没有飙升&#13;
&#13;
![H0FWTAsJV1Tzhnx9yCDSiFZj2-sZXqgDql92RKiHTmU](https://github.com/user-attachments/assets/9bc69438-5ab4-4e87-a99d-cce52fb33ab1)&#13;
&#13;
&#13;
&#13;
![HARrZcRYkhGNhlZNXiAiM44BiH2tVwh3F-MovXUBV5k](https://github.com/user-attachments/assets/746415a7-20ba-44cf-9f81-01a3a86b03db)&#13;
&#13;
&#13;
&#13;
![eI5mu3_t-ORlpLh4QEI7jCz5ZHa0a1O5KU6cJWkdF6c](https://github.com/user-attachments/assets/ec20823f-4e05-4b24-8727-ae4b6ca1f9c6)&#13;
&#13;
&#13;
&#13;
## 五、总结&#13;
&#13;
内存泄漏代码上就那些点～&#13;
&#13;
1、事件监听器：如果在组件中添加了事件监听器，但在组件销毁时没有移除它们，可能会导致内存泄漏。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/2.html</guid><pubDate>Mon, 25 Nov 2024 07:08:49 +0000</pubDate></item><item><title>my first blog~</title><link>https://ivanlee99.github.io//post/1.html</link><description>[YoungsDream](https://ivanlee99.github.io/)&#13;
【创建仓库】完成了&#13;
请接着按照下面的步骤2和3进行操作，全部成功之后，本README.md文件会自动替换掉的哦！&#13;
&#13;
安装&#13;
【创建仓库】点击[通过模板创建仓库](https://github.com/new?template_name=Gmeek-template&amp;template_owner=Meekdai)，建议仓库名称为XXX.github.io，其中XXX为你的github用户名。</description><guid isPermaLink="true">https://ivanlee99.github.io//post/1.html</guid><pubDate>Mon, 25 Nov 2024 06:32:41 +0000</pubDate></item><item><title>关于</title><link>https://ivanlee99.github.io//about.html</link><description>本人前端攻城狮～&#13;
会一点前端知识～&#13;
但不限于前端～&#13;
。</description><guid isPermaLink="true">https://ivanlee99.github.io//about.html</guid><pubDate>Mon, 25 Nov 2024 08:04:07 +0000</pubDate></item></channel></rss>